// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    ADMIN  @map("Admin")
    WAITER @map("Mozo")
    CHEF   @map("Chef")
    HOST   @map("Host")
}

model User {
    id        Int     @id @default(autoincrement())
    firstName String
    lastName  String
    email     String  @unique
    dni       String  @unique @db.VarChar(20)
    phone     String
    address   String?

    password String

    role UserRole @default(WAITER)

    sessions Session[]
    orders   Order[]

    createdAt DateTime @default(now())
}

model Session {
    id        String   @id
    expiresAt DateTime

    userId Int
    user   User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

enum TableStatus {
    Available
    Occupied
    Reserved
}

model Table {
    id           Int           @id @default(autoincrement())
    capacity     Int
    status       TableStatus
    reservations Reservation[]
    orders       Order[]
}

enum ReservationStatus {
    Confirmed
    Canceled
    Pending
}

model Reservation {
    id          Int               @id @default(autoincrement())
    scheduledAt DateTime
    status      ReservationStatus
    createdAt   DateTime          @default(now())

    clientId Int
    tableId  Int
    Client   Client @relation(fields: [clientId], references: [id])
    Table    Table  @relation(fields: [tableId], references: [id])
}

model OrderProduct {
    quantity  Int // Cantidad de productos en el pedido
    unitPrice Float // Precio del producto en el momento del pedido

    orderId   Int // Relación con el pedido
    productId Int // Relación con el producto

    Order   Order   @relation(fields: [orderId], references: [id])
    Product Product @relation(fields: [productId], references: [id])

    @@id([orderId, productId])
}

model Product {
    id          Int     @id @default(autoincrement())
    name        String
    description String?
    price       Float // Precio actual del producto
    stock       Int
    categoryId  Int
    sectionId   Int

    Category     Category       @relation(fields: [categoryId], references: [id])
    Section      Section        @relation(fields: [sectionId], references: [id])
    orderDetails OrderProduct[]
}

enum OrderStatus {
    Pending
    InProcess
    Canceled
    Completed
}

model Order {
    id              Int         @id @default(autoincrement())
    createdAt       DateTime    @default(now())
    status          OrderStatus
    total           Float
    paymentMethodId Int
    clientId        Int
    waiterId        Int
    tableId         Int
    notes           String?

    paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
    client        Client        @relation(fields: [clientId], references: [id])
    waiter        User          @relation(fields: [waiterId], references: [id])
    table         Table         @relation(fields: [tableId], references: [id])

    details OrderProduct[]
}

model PaymentMethod {
    id   Int    @id @default(autoincrement())
    name String @unique

    Order Order[]
}

model Category {
    id          Int     @id @default(autoincrement())
    name        String
    description String?

    products Product[]
}

model Section {
    id       Int       @id @default(autoincrement())
    name     String
    products Product[]
}

model Client {
    id        Int    @id @default(autoincrement())
    firstName String
    lastName  String
    phone     String
    email     String @unique

    reservations Reservation[]
    orders       Order[]
    waitlists    Waitlist[]
}

enum WaitlistStatus {
    Waiting
    Seated
    Cancelled
}

model Waitlist {
    id              Int            @id @default(autoincrement())
    partySize       Int
    status          WaitlistStatus @default(Waiting)
    reservationTime DateTime       @default(now())
    seatedTime      DateTime? // Puede ser nulo hasta que el cliente sea sentado
    notes           String? // Opcional

    clientId Int
    client   Client @relation(fields: [clientId], references: [id])
}
